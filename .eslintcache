[{"E:\\epsilon\\epsilon-frontend\\src\\index.js":"1","E:\\epsilon\\epsilon-frontend\\src\\App.js":"2","E:\\epsilon\\epsilon-frontend\\src\\components\\NavbarComp.js":"3","E:\\epsilon\\epsilon-frontend\\src\\pages\\Symptoms.js":"4","E:\\epsilon\\epsilon-frontend\\src\\pages\\LogIn.js":"5","E:\\epsilon\\epsilon-frontend\\src\\pages\\SignUp.js":"6","E:\\epsilon\\epsilon-frontend\\src\\components\\SignUpForm.js":"7","E:\\epsilon\\epsilon-frontend\\src\\components\\LogInForm.js":"8","E:\\epsilon\\epsilon-frontend\\src\\components\\SymptomsTable.js":"9","E:\\epsilon\\epsilon-frontend\\src\\components\\SymptomChart.js":"10","E:\\epsilon\\epsilon-frontend\\src\\pages\\Profile.js":"11","E:\\epsilon\\epsilon-frontend\\src\\pages\\Questionnaire.js":"12","E:\\epsilon\\epsilon-frontend\\src\\components\\QuestionnaireForm.js":"13","E:\\epsilon\\epsilon-frontend\\src\\components\\QuestionnaireItem.js":"14","E:\\epsilon\\epsilon-frontend\\src\\userContext.js":"15"},{"size":260,"mtime":1609175211757,"results":"16","hashOfConfig":"17"},{"size":2248,"mtime":1609283859100,"results":"18","hashOfConfig":"17"},{"size":1420,"mtime":1609284152722,"results":"19","hashOfConfig":"17"},{"size":9376,"mtime":1609286185368,"results":"20","hashOfConfig":"17"},{"size":260,"mtime":1609194124395,"results":"21","hashOfConfig":"17"},{"size":265,"mtime":1609194129662,"results":"22","hashOfConfig":"17"},{"size":5414,"mtime":1609283711810,"results":"23","hashOfConfig":"17"},{"size":2915,"mtime":1609283646378,"results":"24","hashOfConfig":"17"},{"size":1034,"mtime":1609239668978,"results":"25","hashOfConfig":"17"},{"size":3378,"mtime":1609284536482,"results":"26","hashOfConfig":"17"},{"size":231,"mtime":1609172214592,"results":"27","hashOfConfig":"17"},{"size":318,"mtime":1609282686426,"results":"28","hashOfConfig":"17"},{"size":16488,"mtime":1609330370240,"results":"29","hashOfConfig":"17"},{"size":21218,"mtime":1609244957216,"results":"30","hashOfConfig":"17"},{"size":79,"mtime":1609280185370,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"89hohj",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"39"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\epsilon\\epsilon-frontend\\src\\index.js",[],["66","67"],"E:\\epsilon\\epsilon-frontend\\src\\App.js",[],"E:\\epsilon\\epsilon-frontend\\src\\components\\NavbarComp.js",[],["68","69"],"E:\\epsilon\\epsilon-frontend\\src\\pages\\Symptoms.js",["70","71"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport Axios from 'axios'\r\nimport { UserContext } from '../userContext'\r\nimport NavbarComp from '../components/NavbarComp'\r\nimport SymptomsChart from '../components/SymptomChart'\r\nimport SymptomsTable from '../components/SymptomsTable'\r\n\r\nconst Symptoms = () => {\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [showSymptomIndex, setShowSymptomIndex] = useState(0)\r\n  const [showStatistics, setShowStatistics] = useState(false)\r\n  const [mainRawData, setMainRawData] = useState([])\r\n  const [mainDataSet, setMainDataSet] = useState([])\r\n  const [tempAvgData, setTempAvgData] = useState([])\r\n  const [tempMaxData, setTempMaxData] = useState([])\r\n  const [tempMinData, setTempMinData] = useState([])\r\n  const [heartAvgData, setheartAvgData] = useState([])\r\n  const [heartMaxData, setheartMaxData] = useState([])\r\n  const [heartMinData, setheartMinData] = useState([])\r\n  const [respAvgData, setRespAvgData] = useState([])\r\n  const [respMaxData, setRespMaxData] = useState([])\r\n  const [respMinData, setRespMinData] = useState([])\r\n  const [bloodAvgData, setBloodAvgData] = useState([])\r\n  const [bloodMaxData, setBloodMaxData] = useState([])\r\n  const [bloodMinData, setBloodMinData] = useState([])\r\n  const [coughCountData, setCoughCountData] = useState([])\r\n  const userContext = useContext(UserContext)\r\n\r\n  const getUserData = async (userid) => {\r\n    const userConf = {\r\n      UID: userContext.UID,\r\n    }\r\n    const fetchOptions = {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userConf),\r\n    }\r\n    const response = await Axios({\r\n      method: 'GET',\r\n      url: 'http://localhost:3002/api/v1/symptoms?UID1=' + userContext.UID,\r\n    })\r\n    console.log('http://localhost:3002/api/v1/symptoms?UID=' + userContext.UID)\r\n    console.log(response)\r\n    let data = response.data\r\n    data.sort((a, b) => new Date(a.ts) - new Date(b.ts))\r\n    console.log(data)\r\n    setMainRawData(data)\r\n    let labels = []\r\n    let chartData = [\r\n      {\r\n        title: 'Temperature',\r\n        data: [],\r\n      },\r\n      {\r\n        title: 'Heart Rate',\r\n        data: [],\r\n      },\r\n      {\r\n        title: 'Respiration Rate',\r\n        data: [],\r\n      },\r\n      {\r\n        title: 'Blood Oxygen',\r\n        data: [],\r\n      },\r\n    ]\r\n    data.forEach((d) => {\r\n      labels.push(new Date(d.ts))\r\n      if (d.temperature) {\r\n        chartData[0].data.push({\r\n          time: new Date(d.ts),\r\n          value: d.temperature,\r\n        })\r\n      }\r\n      if (d.heartRate) {\r\n        chartData[1].data.push({\r\n          time: new Date(d.ts),\r\n          value: d.heartRate,\r\n        })\r\n      }\r\n      if (d.respRate) {\r\n        chartData[2].data.push({\r\n          time: new Date(d.ts),\r\n          value: d.respRate,\r\n        })\r\n      }\r\n      if (d.bloodOxygen) {\r\n        chartData[3].data.push({\r\n          time: new Date(d.ts),\r\n          value: d.bloodOxygen,\r\n        })\r\n      }\r\n    })\r\n    console.log(chartData)\r\n    setMainDataSet(chartData)\r\n    //getStats\r\n    const response2 = await fetch(\r\n      'http://localhost:3002/api/v1/statistics/' + userContext.UID\r\n    )\r\n    data = await response2.json()\r\n    console.log(data)\r\n    const { temperature, respRate, heartRate, bloodOxygen, cough } = data\r\n    setTempAvgData(\r\n      temperature.tempAvg.sort((a, b) => new Date(a.time) - new Date(b.time))\r\n    )\r\n    setTempMaxData(temperature.tempMax)\r\n    setTempMinData(temperature.tempMin)\r\n    setheartAvgData(\r\n      heartRate.heartAvg.sort((a, b) => new Date(a.time) - new Date(b.time))\r\n    )\r\n    setheartMaxData(heartRate.heartMax)\r\n    setheartMinData(heartRate.heartMin)\r\n    setRespAvgData(\r\n      respRate.respAvg.sort((a, b) => new Date(a.time) - new Date(b.time))\r\n    )\r\n    setRespMaxData(respRate.respMax)\r\n    setRespMinData(respRate.respMin)\r\n    setBloodAvgData(\r\n      bloodOxygen.bloodAvg.sort((a, b) => new Date(a.time) - new Date(b.time))\r\n    )\r\n    setBloodMaxData(bloodOxygen.bloodMax)\r\n    setBloodMinData(bloodOxygen.bloodMin)\r\n    setCoughCountData(\r\n      cough.coughCount.sort((a, b) => new Date(a.time) - new Date(b.time))\r\n    )\r\n    setIsLoading(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getUserData()\r\n  }, [])\r\n\r\n  if (!isLoading) {\r\n    return (\r\n      <div>\r\n        <NavbarComp />\r\n        <div className='d-flex justify-content-center'>\r\n          <button\r\n            className='btn btn-light'\r\n            onClick={() => setShowSymptomIndex(0)}\r\n          >\r\n            Temperature\r\n          </button>\r\n          <button\r\n            className='btn btn-light'\r\n            onClick={() => setShowSymptomIndex(1)}\r\n          >\r\n            Hearth Rate\r\n          </button>\r\n          <button\r\n            className='btn btn-light'\r\n            onClick={() => setShowSymptomIndex(2)}\r\n          >\r\n            Respiration Rate\r\n          </button>\r\n          <button\r\n            className='btn btn-light'\r\n            onClick={() => setShowSymptomIndex(3)}\r\n          >\r\n            Blood Oxygen\r\n          </button>\r\n          <button\r\n            className='btn btn-light'\r\n            onClick={() => setShowSymptomIndex(4)}\r\n          >\r\n            Cough\r\n          </button>\r\n        </div>\r\n        <div className='d-flex justify-content-center'>\r\n          <button\r\n            className='btn btn-light'\r\n            onClick={() => setShowStatistics(false)}\r\n          >\r\n            Raw Data\r\n          </button>\r\n          <button\r\n            className='btn btn-light'\r\n            onClick={() => setShowStatistics(true)}\r\n          >\r\n            Statistics\r\n          </button>\r\n        </div>\r\n        {showSymptomIndex === 0 &&\r\n          (!showStatistics ? (\r\n            <SymptomsChart\r\n              dataset={mainDataSet[0]}\r\n              color='#ff0000'\r\n              title='Temperature'\r\n              minTick='34'\r\n              maxTick='40'\r\n            />\r\n          ) : (\r\n            <SymptomsChart\r\n              datasets1={tempAvgData}\r\n              color1='#000000'\r\n              title1='Average Temperature'\r\n              datasets2={tempMaxData}\r\n              color2='#ff0000'\r\n              title2='Maximum Temperature'\r\n              datasets3={tempMinData}\r\n              color3='#0000ff'\r\n              title3='Minimum Temperature'\r\n              minTick='33'\r\n              maxTick='40'\r\n            />\r\n          ))}\r\n        {showSymptomIndex === 1 &&\r\n          (!showStatistics ? (\r\n            <SymptomsChart\r\n              dataset={mainDataSet[1]}\r\n              color='#00ff00'\r\n              title='Hearth Rate'\r\n              minTick='55'\r\n              maxTick='115'\r\n            />\r\n          ) : (\r\n            <SymptomsChart\r\n              datasets1={heartAvgData}\r\n              color1='#000000'\r\n              title1='Average Heart Rate'\r\n              datasets2={heartMaxData}\r\n              color2='#ff0000'\r\n              title2='Maximum Heart Rate'\r\n              datasets3={heartMinData}\r\n              color3='#0000ff'\r\n              title3='Minimum Heart Rate'\r\n              minTick='70'\r\n              maxTick='100'\r\n            />\r\n          ))}\r\n        {showSymptomIndex === 2 &&\r\n          (!showStatistics ? (\r\n            <SymptomsChart\r\n              dataset={mainDataSet[2]}\r\n              color='#0000ff'\r\n              title='Respiration Rate'\r\n              minTick='0'\r\n              maxTick='30'\r\n            />\r\n          ) : (\r\n            <SymptomsChart\r\n              datasets1={respAvgData}\r\n              color1='#000000'\r\n              title1='Average Respiration Rate'\r\n              datasets2={respMaxData}\r\n              color2='#ff0000'\r\n              title2='Maximum Respiration Rate'\r\n              datasets3={respMinData}\r\n              color3='#0000ff'\r\n              title3='Minimum Respiration Rate'\r\n              minTick='0'\r\n              maxTick='40'\r\n            />\r\n          ))}\r\n        {showSymptomIndex === 3 &&\r\n          (!showStatistics ? (\r\n            <SymptomsChart\r\n              dataset={mainDataSet[3]}\r\n              color='#000000'\r\n              title='Blood Oxygen'\r\n              minTick='90'\r\n              maxTick='100'\r\n            />\r\n          ) : (\r\n            <SymptomsChart\r\n              datasets1={bloodAvgData}\r\n              color1='#000000'\r\n              title1='Average Blood Oxygen'\r\n              datasets2={bloodMaxData}\r\n              color2='#ff0000'\r\n              title2='Maximum Blood Oxygen'\r\n              datasets3={bloodMinData}\r\n              color3='#0000ff'\r\n              title3='Minimum Blood Oxygen'\r\n              minTick='88'\r\n              maxTick='100'\r\n            />\r\n          ))}\r\n        {showSymptomIndex === 4 && (\r\n          <SymptomsChart\r\n            dataset={{ data: coughCountData }}\r\n            color='#00ff00'\r\n            title='Cough Count'\r\n            minTick='0'\r\n            maxTick='40'\r\n          />\r\n        )}\r\n        <div className='c'>\r\n          <SymptomsTable\r\n            dataset={mainRawData.filter(\r\n              (d) => d.temperature || d.heartRate || d.respRate\r\n            )}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className='container'>\r\n        <h1 className='display-1'>Loading...</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Symptoms\r\n","E:\\epsilon\\epsilon-frontend\\src\\pages\\LogIn.js",[],"E:\\epsilon\\epsilon-frontend\\src\\pages\\SignUp.js",[],"E:\\epsilon\\epsilon-frontend\\src\\components\\SignUpForm.js",[],"E:\\epsilon\\epsilon-frontend\\src\\components\\LogInForm.js",[],"E:\\epsilon\\epsilon-frontend\\src\\components\\SymptomsTable.js",[],"E:\\epsilon\\epsilon-frontend\\src\\components\\SymptomChart.js",["72","73"],"import React, { useState, useEffect } from 'react'\r\nimport Chart from 'chart.js'\r\n\r\nconst SymptomChart = ({\r\n  dataset,\r\n  color,\r\n  title,\r\n  minTick,\r\n  maxTick,\r\n  title1,\r\n  title2,\r\n  title3,\r\n  datasets1,\r\n  datasets2,\r\n  datasets3,\r\n  color1,\r\n  color2,\r\n  color3,\r\n}) => {\r\n  const chartRef = React.createRef()\r\n  const [chart, setChart] = useState(null)\r\n\r\n  useEffect(() => {\r\n    let lineChart\r\n    console.log(dataset)\r\n    if (dataset) {\r\n      lineChart = new Chart(chartRef.current, {\r\n        type: 'line',\r\n        options: {\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                type: 'time',\r\n                time: {\r\n                  unit: 'week',\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                ticks: {\r\n                  suggestedMin: minTick,\r\n                  suggestedMax: maxTick,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        },\r\n        data: {\r\n          labels: dataset.data.map((d) => d.time),\r\n          datasets: [\r\n            {\r\n              label: title,\r\n              data: dataset.data.map((d) => d.value),\r\n              fill: 'none',\r\n              backgroundColor: color,\r\n              pointRadius: 2,\r\n              borderColor: color,\r\n              borderWidth: 1,\r\n              lineTension: 0,\r\n            },\r\n          ],\r\n        },\r\n      })\r\n    } else {\r\n      lineChart = new Chart(chartRef.current, {\r\n        type: 'line',\r\n        options: {\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                type: 'time',\r\n                time: {\r\n                  unit: 'day',\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                ticks: {\r\n                  suggestedMin: minTick,\r\n                  suggestedMax: maxTick,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        },\r\n        data: {\r\n          labels: datasets1.map((d) => d.time),\r\n          datasets: [\r\n            {\r\n              label: title1,\r\n              data: datasets1.map((d) => d.value),\r\n              fill: 'none',\r\n              backgroundColor: color1,\r\n              pointRadius: 2,\r\n              borderColor: color1,\r\n              borderWidth: 1,\r\n              lineTension: 0,\r\n            },\r\n            {\r\n              label: title2,\r\n              data: datasets2.map((d) => d.value),\r\n              fill: 'none',\r\n              backgroundColor: color2,\r\n              pointRadius: 2,\r\n              borderColor: color2,\r\n              borderWidth: 1,\r\n              lineTension: 0,\r\n            },\r\n            {\r\n              label: title3,\r\n              data: datasets3.map((d) => d.value),\r\n              fill: 'none',\r\n              backgroundColor: color3,\r\n              pointRadius: 2,\r\n              borderColor: color3,\r\n              borderWidth: 1,\r\n              lineTension: 0,\r\n            },\r\n          ],\r\n        },\r\n      })\r\n    }\r\n    setChart(lineChart)\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      className='container container-fluid'\r\n      style={{ width: '70%', height: '100%', position: 'relative' }}\r\n    >\r\n      <canvas\r\n        ref={chartRef}\r\n        style={{ width: '70%', height: '100%', position: 'relative' }}\r\n      ></canvas>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SymptomChart\r\n","E:\\epsilon\\epsilon-frontend\\src\\pages\\Profile.js",[],"E:\\epsilon\\epsilon-frontend\\src\\pages\\Questionnaire.js",["74"],"E:\\epsilon\\epsilon-frontend\\src\\components\\QuestionnaireForm.js",["75"],"E:\\epsilon\\epsilon-frontend\\src\\components\\QuestionnaireItem.js",[],"E:\\epsilon\\epsilon-frontend\\src\\userContext.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"76","replacedBy":"80"},{"ruleId":"78","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":33,"column":11,"nodeType":"84","messageId":"85","endLine":33,"endColumn":23},{"ruleId":"86","severity":1,"message":"87","line":133,"column":6,"nodeType":"88","endLine":133,"endColumn":8,"suggestions":"89"},{"ruleId":"82","severity":1,"message":"90","line":21,"column":10,"nodeType":"84","messageId":"85","endLine":21,"endColumn":15},{"ruleId":"86","severity":1,"message":"91","line":126,"column":6,"nodeType":"88","endLine":126,"endColumn":8,"suggestions":"92"},{"ruleId":"82","severity":1,"message":"93","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":27},{"ruleId":"86","severity":1,"message":"94","line":182,"column":6,"nodeType":"88","endLine":182,"endColumn":8,"suggestions":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],["96"],["97"],"no-unused-vars","'fetchOptions' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserData'. Either include it or remove the dependency array.","ArrayExpression",["98"],"'chart' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'chartRef', 'color', 'color1', 'color2', 'color3', 'dataset', 'datasets1', 'datasets2', 'datasets3', 'maxTick', 'minTick', 'title', 'title1', 'title2', and 'title3'. Either include them or remove the dependency array.",["99"],"'useContext' is defined but never used.","React Hook useEffect has a missing dependency: 'getQuestionnaireData'. Either include it or remove the dependency array.",["100"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [getUserData]",{"range":"107","text":"108"},"Update the dependencies array to be: [chartRef, color, color1, color2, color3, dataset, datasets1, datasets2, datasets3, maxTick, minTick, title, title1, title2, title3]",{"range":"109","text":"110"},"Update the dependencies array to be: [getQuestionnaireData]",{"range":"111","text":"112"},[4288,4290],"[getUserData]",[3047,3049],"[chartRef, color, color1, color2, color3, dataset, datasets1, datasets2, datasets3, maxTick, minTick, title, title1, title2, title3]",[5176,5178],"[getQuestionnaireData]"]