[{"E:\\epsilon\\epsilon-frontend\\src\\index.js":"1","E:\\epsilon\\epsilon-frontend\\src\\App.js":"2","E:\\epsilon\\epsilon-frontend\\src\\components\\NavbarComp.js":"3","E:\\epsilon\\epsilon-frontend\\src\\pages\\Symptoms.js":"4","E:\\epsilon\\epsilon-frontend\\src\\pages\\LogIn.js":"5","E:\\epsilon\\epsilon-frontend\\src\\pages\\SignUp.js":"6","E:\\epsilon\\epsilon-frontend\\src\\components\\SignUpForm.js":"7","E:\\epsilon\\epsilon-frontend\\src\\components\\LogInForm.js":"8","E:\\epsilon\\epsilon-frontend\\src\\components\\SymptomsTable.js":"9","E:\\epsilon\\epsilon-frontend\\src\\components\\SymptomChart.js":"10","E:\\epsilon\\epsilon-frontend\\src\\pages\\Profile.js":"11","E:\\epsilon\\epsilon-frontend\\src\\pages\\Questionnaire.js":"12","E:\\epsilon\\epsilon-frontend\\src\\components\\QuestionnaireForm.js":"13","E:\\epsilon\\epsilon-frontend\\src\\components\\QuestionnaireItem.js":"14","E:\\epsilon\\epsilon-frontend\\src\\userContext.js":"15"},{"size":260,"mtime":1609175211757,"results":"16","hashOfConfig":"17"},{"size":2248,"mtime":1609283859100,"results":"18","hashOfConfig":"17"},{"size":1420,"mtime":1610390095711,"results":"19","hashOfConfig":"17"},{"size":9202,"mtime":1610390077146,"results":"20","hashOfConfig":"17"},{"size":260,"mtime":1609194124395,"results":"21","hashOfConfig":"17"},{"size":265,"mtime":1609194129662,"results":"22","hashOfConfig":"17"},{"size":5414,"mtime":1609283711810,"results":"23","hashOfConfig":"17"},{"size":2915,"mtime":1609283646378,"results":"24","hashOfConfig":"17"},{"size":1034,"mtime":1609239668978,"results":"25","hashOfConfig":"17"},{"size":3378,"mtime":1609284536482,"results":"26","hashOfConfig":"17"},{"size":231,"mtime":1609172214592,"results":"27","hashOfConfig":"17"},{"size":318,"mtime":1609282686426,"results":"28","hashOfConfig":"17"},{"size":16563,"mtime":1610389933294,"results":"29","hashOfConfig":"17"},{"size":21218,"mtime":1609244957216,"results":"30","hashOfConfig":"17"},{"size":79,"mtime":1609280185370,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"89hohj",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\epsilon\\epsilon-frontend\\src\\index.js",[],["67","68"],"E:\\epsilon\\epsilon-frontend\\src\\App.js",[],"E:\\epsilon\\epsilon-frontend\\src\\components\\NavbarComp.js",[],"E:\\epsilon\\epsilon-frontend\\src\\pages\\Symptoms.js",[],"E:\\epsilon\\epsilon-frontend\\src\\pages\\LogIn.js",[],["69","70"],"E:\\epsilon\\epsilon-frontend\\src\\pages\\SignUp.js",[],"E:\\epsilon\\epsilon-frontend\\src\\components\\SignUpForm.js",[],"E:\\epsilon\\epsilon-frontend\\src\\components\\LogInForm.js",[],"E:\\epsilon\\epsilon-frontend\\src\\components\\SymptomsTable.js",[],"E:\\epsilon\\epsilon-frontend\\src\\components\\SymptomChart.js",["71","72"],"import React, { useState, useEffect } from 'react'\r\nimport Chart from 'chart.js'\r\n\r\nconst SymptomChart = ({\r\n  dataset,\r\n  color,\r\n  title,\r\n  minTick,\r\n  maxTick,\r\n  title1,\r\n  title2,\r\n  title3,\r\n  datasets1,\r\n  datasets2,\r\n  datasets3,\r\n  color1,\r\n  color2,\r\n  color3,\r\n}) => {\r\n  const chartRef = React.createRef()\r\n  const [chart, setChart] = useState(null)\r\n\r\n  useEffect(() => {\r\n    let lineChart\r\n    console.log(dataset)\r\n    if (dataset) {\r\n      lineChart = new Chart(chartRef.current, {\r\n        type: 'line',\r\n        options: {\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                type: 'time',\r\n                time: {\r\n                  unit: 'week',\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                ticks: {\r\n                  suggestedMin: minTick,\r\n                  suggestedMax: maxTick,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        },\r\n        data: {\r\n          labels: dataset.data.map((d) => d.time),\r\n          datasets: [\r\n            {\r\n              label: title,\r\n              data: dataset.data.map((d) => d.value),\r\n              fill: 'none',\r\n              backgroundColor: color,\r\n              pointRadius: 2,\r\n              borderColor: color,\r\n              borderWidth: 1,\r\n              lineTension: 0,\r\n            },\r\n          ],\r\n        },\r\n      })\r\n    } else {\r\n      lineChart = new Chart(chartRef.current, {\r\n        type: 'line',\r\n        options: {\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                type: 'time',\r\n                time: {\r\n                  unit: 'day',\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                ticks: {\r\n                  suggestedMin: minTick,\r\n                  suggestedMax: maxTick,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        },\r\n        data: {\r\n          labels: datasets1.map((d) => d.time),\r\n          datasets: [\r\n            {\r\n              label: title1,\r\n              data: datasets1.map((d) => d.value),\r\n              fill: 'none',\r\n              backgroundColor: color1,\r\n              pointRadius: 2,\r\n              borderColor: color1,\r\n              borderWidth: 1,\r\n              lineTension: 0,\r\n            },\r\n            {\r\n              label: title2,\r\n              data: datasets2.map((d) => d.value),\r\n              fill: 'none',\r\n              backgroundColor: color2,\r\n              pointRadius: 2,\r\n              borderColor: color2,\r\n              borderWidth: 1,\r\n              lineTension: 0,\r\n            },\r\n            {\r\n              label: title3,\r\n              data: datasets3.map((d) => d.value),\r\n              fill: 'none',\r\n              backgroundColor: color3,\r\n              pointRadius: 2,\r\n              borderColor: color3,\r\n              borderWidth: 1,\r\n              lineTension: 0,\r\n            },\r\n          ],\r\n        },\r\n      })\r\n    }\r\n    setChart(lineChart)\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      className='container container-fluid'\r\n      style={{ width: '70%', height: '100%', position: 'relative' }}\r\n    >\r\n      <canvas\r\n        ref={chartRef}\r\n        style={{ width: '70%', height: '100%', position: 'relative' }}\r\n      ></canvas>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SymptomChart\r\n","E:\\epsilon\\epsilon-frontend\\src\\pages\\Profile.js",[],"E:\\epsilon\\epsilon-frontend\\src\\pages\\Questionnaire.js",["73"],"import React, { useContext } from 'react'\r\nimport NavbarComp from '../components/NavbarComp'\r\nimport QuestionnaireForm from '../components/QuestionnaireForm'\r\nconst Questionnaire = () => {\r\n  return (\r\n    <div>\r\n      <NavbarComp />\r\n\r\n      <QuestionnaireForm />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Questionnaire\r\n",["74","75"],"E:\\epsilon\\epsilon-frontend\\src\\components\\QuestionnaireForm.js",[],"E:\\epsilon\\epsilon-frontend\\src\\components\\QuestionnaireItem.js",[],"E:\\epsilon\\epsilon-frontend\\src\\userContext.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"76","replacedBy":"80"},{"ruleId":"78","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":21,"column":10,"nodeType":"84","messageId":"85","endLine":21,"endColumn":15},{"ruleId":"86","severity":1,"message":"87","line":126,"column":6,"nodeType":"88","endLine":126,"endColumn":8,"suggestions":"89"},{"ruleId":"82","severity":1,"message":"90","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":27},{"ruleId":"76","replacedBy":"91"},{"ruleId":"78","replacedBy":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],["93"],["94"],"no-unused-vars","'chart' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'chartRef', 'color', 'color1', 'color2', 'color3', 'dataset', 'datasets1', 'datasets2', 'datasets3', 'maxTick', 'minTick', 'title', 'title1', 'title2', and 'title3'. Either include them or remove the dependency array.","ArrayExpression",["95"],"'useContext' is defined but never used.",["93"],["94"],"no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},"Update the dependencies array to be: [chartRef, color, color1, color2, color3, dataset, datasets1, datasets2, datasets3, maxTick, minTick, title, title1, title2, title3]",{"range":"98","text":"99"},[3047,3049],"[chartRef, color, color1, color2, color3, dataset, datasets1, datasets2, datasets3, maxTick, minTick, title, title1, title2, title3]"]